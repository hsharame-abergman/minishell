
#include "../header/minishell.h"

/*
	cat << EOF
	> hello
	> $HOME
	> EOF
	hello
	/home/hsharame 
		! when writing to the temporary file, variables must already 
		be handled correctly
*/

char	*temp_file(int number)
{
	char	*res;
	char	*nombre;

	nombre = ft_itoa(number);
	res = ft_strjoin("TEMPORARY_FILE", nombre);
	free(nombre);
	return (res);
}

char	*check_if_var(char *input)
{
	char	**token;
	char	*env_value;
	int		i;

	i = 0;
	token = ft_split(input, ' ');
	if (!token)
		return (NULL);
	while (token[i])
	{
		token[i] = ft_strrchr(token[i], '$');
		if (token[i] != NULL)
		{
			env_value = getenv(token[i]);
			if (!env_value)
				token[i] = ft_strdup("");
			else
				token[i] = ft_strdup(env_value);
		}
		i++;
	}
	input = tab_to_str(token);
	free_tab(token);
	return (input);
}

bool	heredoc_succes(t_store *data, t_redirect *heredoc)
{
	int		fd;
	char	*input;

	(void)data;
	fd = open(heredoc->infile, O_CREAT | O_WRONLY | O_TRUNC, 0644);
	while (1)
	{
		input = readline("> ");
		if (ft_strcmp(input, heredoc->delimiter) == 0)
			break ;
		if (ft_strrchr(input, '$') != NULL)
			input = check_if_var(input);
		ft_putendl_fd(input, fd);
		free(input);
	}
	free(input);
	close(fd);
	return (true);
}

void	parse_heredoc(t_store *data, t_cmd **cmd, t_token **token)
{
	static int	number;
	t_token		*temp;

	temp = *token;
	create_redirect(*cmd);
	(*cmd)->redirect->delimiter = ft_strdup(temp->next->value);
	(*cmd)->redirect->infile = temp_file(number);
	if (heredoc_succes(data, (*cmd)->redirect))
		(*cmd)->redirect->fd_in = open((*cmd)->redirect->infile, O_RDONLY);
	else
		(*cmd)->redirect->fd_in = -1;
	number++;
	temp = temp->next->next;
	*token = temp;
}

#include "../header/minishell.h"

t_cmd	*init_tree(t_token **token_list, t_store *data)
{
	t_token	*save;
	t_cmd	*last_node;
	t_cmd	*current;
	int		first;

	save = *token_list;
	current = NULL;
	last_node = NULL;
	first = 1;
	while (save && save->type != END)
	{
		if (first == 1 && save->type != PIPE)
			current = handle_cmd(&save, &last_node, &first);
		else if (is_word_token(save->type))
			add_args(&save, current);
		else if (save->type == PIPE)
			handle_pipe(&save, &current, &first);
		else if (is_redirection_token(save->type))
			add_redirect(&save, &current, data);
		if (current->error == true)
			break ;
		last_node = current;
	}
	return (current);
}

int	count_args(t_token *save)
{
	int	i;

	i = 0;
	while (save && is_word_token(save->type))
	{
		i++;
		save = save->next;
	}
	return (i);
}

void	add_args(t_token **save, t_cmd *cmd)
{
	int		count;
	int		i;
	t_token	*temp;

	temp = *save;
	i = 1;
	count = count_args(temp) + 2;
	cmd->args = (char **)malloc(sizeof(char *) * count);
	if (!cmd->args)
		return ;
	cmd->args[0] = ft_strdup(cmd->value);
	while (i < count - 1)
	{
		cmd->args[i] = ft_strdup((*save)->value);
		*save = (*save)->next;
		i++;
	}
	cmd->args[count - 1] = NULL;
}

void	parser(t_store *data, t_token *token_list)
{
	t_cmd	*syntax_tree;
	t_cmd	*temp;

	syntax_tree = init_tree(&token_list, data);
	while (syntax_tree->left)
		syntax_tree = syntax_tree->left;
	temp = syntax_tree;
	affiche_ast(syntax_tree);
	data->pars = syntax_tree;
}

#include "../header/minishell.h"

char	*find_path(char **env, char *cmd)
{
	char	*path;
	int		i;

	i = 0;
	while (env[i])
	{
		path = ft_strjoin(env[i], cmd);
		if (access(path, X_OK) == 0)
			return (path);
		free(path);
		i++;
	}
	return (NULL);
}

char	*define_path(char *cmd)
{
	char	**env_dir;
	char	*path;
	char	*path_env;

	path_env = getenv("PATH");
	if (!path_env)
		return (NULL);
	env_dir = ft_split(path_env, ':');
	cmd = ft_strjoin("/", cmd);
	path = find_path(env_dir, cmd);
	free(cmd);
	free_tab(env_dir);
	return (path);
}

t_cmd	*parser_cmd(t_token *token, t_cmd *last)
{
	t_cmd	*current;

	current = create_node(token->value);
	if (last)
	{
		last->right = current;
		current->left = last;
	}
	if (is_builtin(current->value))
		current->path = ft_strdup(current->value);
	else
	{
		if (!ft_strchr(current->value, '/'))
			current->path = define_path(current->value);
		else
			current->path = ft_strdup(current->value);
		check_if_exists(current);
	}
	return (current);
}

t_cmd	*handle_cmd(t_token **save, t_cmd **last, int *first)
{
	t_cmd	*current;

	current = parser_cmd(*save, *last);
	*first = 0;
	*save = (*save)->next;
	return (current);
}

void	handle_pipe(t_token **save, t_cmd **current, int *first)
{
	if (*first == 1)
	{
		error_syntax("syntax error near unexpected token `|'\n", 2);
		(*current)->error = true;
		return ;
	}
	(*current)->pipe = true;
	*save = (*save)->next;
	*first = 1;
}

#include "../header/minishell.h"

/*
 	<		-	fd_in - stores the file descriptor
				infile - the name of the file to open
	open_input
	<<		-	fd_in - the file descriptor of the temporary file
				delimiter - the end marker provided by the user
	heredoc
	> >>	- 	fd_out - stores the file descriptor for writing
				outfile - the name of the file to open for writing
	open_file_trunc
	open_file_append
*/

void	open_file_trunc(t_redirect *trunc, char *filename)
{
	trunc->outfile = ft_strdup(filename);
	trunc->fd_out = open(filename, O_CREAT | O_WRONLY | O_TRUNC, 0644);
	if (trunc->fd_out == -1)
		ft_putstr_fd("Error\n", 2);
		//error_msg(strerror(errno));
}

void	open_file_append(t_redirect *trunc, char *filename)
{
	trunc->outfile = ft_strdup(filename);
	trunc->fd_out = open(filename, O_CREAT | O_WRONLY | O_APPEND, 0644);
		ft_putstr_fd("Error\n", 2);
		//error_msg(strerror(errno));
}

/*
	In case of input redirection, if the file does not already exist, 
	it does not create a new file and displays the error
	bash: [filename]: No such file or directory
*/

void	open_input(t_redirect *trunc, char *filename)
{
	trunc->infile = ft_strdup(filename);
	trunc->fd_in = open(filename, O_RDONLY);
		ft_putstr_fd("No such file or directoryr\n", 2);
		//error_msg(strerror(errno));
}

#include "../header/minishell.h"

/*
	<< HEREDOC
	< REDIRECT_INPUT
	>> APPEND_MODE
	> REDIRECT_OUTPUT
*/

void	add_redirect(t_token **save, t_cmd **current, t_store *data)
{
	if ((*save)->next->type == END)
	{
		error_syntax("syntax error near unexpected token `newline'\n", 2);
		(*current)->error = true;
		return ;
	}
	if ((*save)->type == REDIRECT_INPUT)
		parse_input(current, save);
	else if ((*save)->type == REDIRECT_OUTPUT)
		parse_trunc(current, save);
	else if ((*save)->type == HEREDOC)
		parse_heredoc(data, current, save);
	else if ((*save)->type == APPEND_MODE)
		parse_append(current, save);
}

void	parse_append(t_cmd **cmd, t_token **token)
{
	t_token	*temp;

	temp = *token;
	create_redirect(*cmd);
	open_file_append((*cmd)->redirect, temp->next->value);
	temp = temp->next->next;
	*token = temp;
}

void	parse_input(t_cmd **cmd, t_token **token)
{
	t_token	*temp;

	temp = *token;
	create_redirect(*cmd);
	open_input((*cmd)->redirect, temp->next->value);
	temp = temp->next->next;
	*token = temp;
}

void	parse_trunc(t_cmd **cmd, t_token **token)
{
	t_token	*temp;

	temp = *token;
	create_redirect(*cmd);
	open_file_trunc((*cmd)->redirect, temp->next->value);
	temp = temp->next->next;
	*token = temp;
}

#include "../header/minishell.h"

char	*fill_str(char *res, char **token)
{
	int	j;
	int	len;
	int	i;

	i = 0;
	len = 0;
	while (token[i])
	{
		j = 0;
		while (token[i][j])
		{
			res[len] = token[i][j];
			j++;
			len++;
		}
		if (token[i + 1])
			res[len++] = ' ';
		i++;
	}
	res[len] = '\0';
	return (res);
}

char	*tab_to_str(char **token)
{
	char	*res;
	int		len;
	int		i;

	i = 0;
	len = 0;
	while (token[i])
	{
		len += strlen(token[i]);
		i++;
	}
	res = (char *)malloc(sizeof(char) * (len + i));
	if (!res)
		return (NULL);
	res = fill_str(res, token);
	return (res);
}

void	create_redirect(t_cmd *cmd)
{
	cmd->redirect = (t_redirect *)malloc(sizeof(t_redirect));
	if (!cmd->redirect)
		return ;
	cmd->redirect->fd_in = -1;
	cmd->redirect->fd_out = -1;
	cmd->redirect->infile = NULL;
	cmd->redirect->outfile = NULL;
	cmd->redirect->delimiter = NULL;
}

void	check_if_exists(t_cmd *node)
{
	if (node->value && node->path == NULL)
		cmd_error(node, 1);
	else
	{
		if (!access(node->value, F_OK))
			cmd_error(node, 2);
		else if (!access(node->value, X_OK))
			cmd_error(node, 3);
	}
}

void	cmd_error(t_cmd *node, int i)
{
	node->error = true;
	if (i == 1)
		printf("minishell: %s: No such file or directory\n", node->value);
	else if (i == 2)
		printf("minishell: %s: command not found\n", node->value);
	else if (i == 3)
		printf("minishell: %s: Permission denied\n", node->value);
}

#include "../header/minishell.h"

t_cmd	*create_node(char *value)
{
	t_cmd	*node;

	node = (t_cmd *)malloc(sizeof(t_cmd));
	if (!node)
		return (NULL);
	node->value = ft_strdup(value);
	node->redirect = NULL;
	node->path = NULL;
	node->args = NULL;
	node->pipe = false;
	node->error = false;
	node->left = NULL;
	node->right = NULL;
	return (node);
}

bool	is_word_token(int type)
{
	if (type == TOKEN_WORD || type == CHAR_DQUOTE || type == CHAR_QUOTE)
		return (true);
	else
		return (false);
}

bool	is_redirection_token(int type)
{
	if (type == REDIRECT_INPUT || type == REDIRECT_OUTPUT
		|| type == HEREDOC || type == APPEND_MODE)
		return (true);
	else
		return (false);
}

bool	is_builtin(char *s)
{
	if (ft_strcmp(s, "cd"))
		return (true);
	else if (ft_strcmp(s, "echo"))
		return (true);
	else if (ft_strcmp(s, "env"))
		return (true);
	else if (ft_strcmp(s, "exit"))
		return (true);
	else if (ft_strcmp(s, "export"))
		return (true);
	else if (ft_strcmp(s, "pwd"))
		return (true);
	return (false);
}

void	affiche_ast(t_cmd *node)
{
	int	i;

	i = 1;
	if (!node)
		return ;
	printf("Commande : %s\n", node->value);
	printf("PATH : %s\n", node->path);
	if (node->args)
	{
		printf("Arguments : ");
		while (node->args[i])
		{
			printf("%d: %s ", i, node->args[i]);
				i++;
		}
		printf("\n");
	}
	if (node->pipe)
		printf("Pipe detected\n");
	affiche_ast(node->right);
}
